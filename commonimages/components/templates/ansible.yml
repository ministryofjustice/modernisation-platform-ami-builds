---
name: ansible
description: Install ansible roles
schemaVersion: 1.0
parameters:
  - Version:
      type: string
      default: 0.0.10
      description: "Component version, increment if you make changes."
  - Platform:
      type: string
      default: "Linux"
      description: Platform.
  - Ami:
      type: string
      description: "Name of AMI. There must be a group_vars/ami_$Ami file in the repo."
  - Branch:
      type: string
      default: main
      description: Git branch to use when cloning the ansible repo
  - AnsibleRepo:
      type: string
      default: modernisation-platform-configuration-management
      description: The ansible github repo to clone
  - AnsibleRepoDir:
      type: string
      default: ansible
      description: The directory in the repo where the ansible code is found
  - AnsibleTags:
      type: string
      default: amibuild
      description: The tags to run ansible with
  - AnsibleArgs:
      type: string
      default: ""
      description: Any other additional arguments to pass into ansible
phases:
  - name: build
    steps:
      # Install ansible roles
      - name: InstallAndRunAnsible
        action: ExecuteBash
        inputs:
          commands:
            - |
              # do not set -u as it breaks on RedHat 6
              set -eo pipefail
              PATH=$PATH:/usr/local/bin
              run_ansible() {
                # define all params here to make standalone testing of script easier
                repo="{{ AnsibleRepo }}"
                ami_tag="{{ Ami }}"
                ansible_repo_dir="{{ AnsibleRepoDir }}"
                ansible_tags="{{ AnsibleTags }}"
                ansible_args="{{ AnsibleArgs }}"
                branch="{{ Branch }}"

                # clone ansible roles and playbook
                yum install -y git
                ansible_dir=$(mktemp -d)
                echo "Cloning $repo into $ansible_dir using branch=$branch"
                cd $ansible_dir
                git clone -b $branch "https://github.com/ministryofjustice/$repo.git"

                # set python version
                # check if already installed (e.g. RHEL6/7 via python component)
                if [[ $(which python3.9 2> /dev/null) ]]; then
                  python=$(which python3.9)
                elif [[ $(which python3.6 2> /dev/null) ]]; then
                  python=$(which python3.6)
                else
                  # otherwise just install via yum
                  yum install -y python39 || true
                  if [[ $(which python3.9 2> /dev/null) ]]; then
                    python=$(which python3.9)
                  else
                    echo "Python3.9/3.6 not found"
                    exit 1
                  fi
                fi
                echo "python: $python"

                # install python dependencies outside of virtual env so ansible
                # can be executed remotely
                cd $ansible_dir/$repo/$ansible_repo_dir
                $python -m pip install -r requirements.txt

                # activate virtual environment
                mkdir $ansible_dir/python-venv && cd "$_"
                $python -m venv ansible
                source ansible/bin/activate
                $python -m pip install --upgrade pip
                if [[ "$python" =~ 3.6 ]]; then
                  $python -m pip install wheel
                  $python -m pip install cryptography==2.3
                  export LC_ALL=en_US.UTF-8
                  $python -m pip install ansible-core==2.11.12
                else
                  $python -m pip install ansible==6.0.0
                fi

                # install requirements in virtual env
                cd $ansible_dir/$repo/$ansible_repo_dir
                $python -m pip install -r requirements.txt
                ansible-galaxy role install -r requirements.yml
                ansible-galaxy collection install -r requirements.yml --force

                # run ansible (note comma after localhost is deliberate)
                ansible-playbook site.yml \
                --connection=local \
                --inventory localhost, \
                --extra-vars "ansible_python_interpreter=$python" \
                --extra-vars "target=localhost" \
                --extra-vars "@group_vars/ami_$ami_tag.yml" \
                --tags "$ansible_tags" \
                --become $ansible_args

                # Cleanup
                deactivate
                echo "Cleaning up $ansible_dir"
                rm -rf $ansible_dir/$repo
                rm -rf $ansible_dir/python-venv
                rmdir $ansible_dir
              }
              echo "ansible $ami_tag start" | logger -p local3.info -t ami-component
              run_ansible 2>&1 | logger -p local3.info -t ami-component -s 2>&1
              echo "ansible $ami_tag end" | logger -p local3.info -t ami-component